---
AWSTemplateFormatVersion: 2010-09-09
Description: This template sets up RHEL with HA in the last node of the cluster. (qs-1s2qufol1)
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W4002
        - W9002 #Template is not customer-facing
        - W9003 #Template is not customer-facing
        - W9004 #Template is not customer-facing
        - W9006 #Template is not customer-facing
Parameters:
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 KeyPair."
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: "must be a valid EC2 instance type."
    Default: t2.medium
    Description: "EC2 instance type"
    Type: String
  SubnetId:
    Description: "Identifer of subnet the instance resides in"
    Type: AWS::EC2::Subnet::Id
  ImageId:
    Description: "ID of AMI used to launch instance"
    Type: AWS::EC2::Image::Id
  SecurityGroupId:
    Description: "ID of Security Group for cluster communication"
    Type: AWS::EC2::SecurityGroup::Id
  ClusterPassword:
    AllowedPattern: ^\S+$
    ConstraintDescription: Password should not be empty or contain whitespace
    Description: Password used for the user HACluster in the RHEL HA setup
    Type: String
    NoEcho: true
  BucketName:
    Description: Name of bucket that will contain the hostnames
    Type: String
  ClusterRole:
    Description: IAM Role for access to the S3 Buckets
    Type: String
  ClusterProfile:
    Description: IAM Instance Profile for access to the S3 Buckets
    Type: String
  FloatingIPAddress:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    ConstraintDescription: IP Address must be in the form x.x.x.x
    Description: Floating IP Address (MUST not be in any out the subnets)
    Default: 10.0.1.0
    Type: String
  RouteTableId:
    Description: ID of the route table that manages fencing
    Type: String
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: implementing/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  Node1InstanceId:
    Description: Instance ID of first RHEL instance, if exists
    Type: String
  Node2InstanceId:
    Description: Instance ID of the second RHEL instance, if exists
    Type: String
  Node3InstanceId:
    Description: Instance ID of the third RHEL instance, if exists
    Type: String
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
  RHELwithHAInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ClusterRole
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 'install'
            - 'setup'
            - 'service'
            - 'hostname'
        install:
          packages: 
            yum: 
              pcs: []
              pacemaker: []
              fence-agents-aws: []
        setup:
          files:
            "/upload_hostname.py":
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/upload_hostname.py
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
            "/get_hostnames.py":
              source:
                !Sub
                - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/get_hostnames.py
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              authentication: S3AccessCreds
          commands:
            setpassword:
              command: "echo \"hacluster:$CLUSTERPASSWORD\" | sudo chpasswd" 
              env:
                CLUSTERPASSWORD: !Ref ClusterPassword
        service:
          commands:
            a_startservice:
              command: "sudo systemctl start pcsd.service"
            b_enableservice:
              command: "sudo systemctl enable pcsd.service"
        hostname:
          commands:
            execute:
              command: !Sub "sudo python3 /get_hostnames.py ${BucketName} ${ClusterPassword} ${AWS::Region} ${FloatingIPAddress} ${RouteTableId} ${Node1InstanceId} ${Node2InstanceId} ${Node3InstanceId}"
    Properties:
      KeyName: !Ref KeyPairName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ClusterProfile
      SubnetId: !Ref SubnetId
      ImageId: !Ref ImageId
      SecurityGroupIds:
        - !Ref SecurityGroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          rhel_ver=$(awk -F'=' '/VERSION_ID/{ gsub(/"/,""); print $2}' /etc/os-release)
          echo "RHEL Version: $rhel_ver"

          if [[ $rhel_ver == "8."* ]]; then
            sudo dnf -y install wget python3 python3-setuptools python3-docutils awscli
            sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -O /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo easy_install-3 --script-dir /usr/local/bin /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
          else
            sudo dnf -y install wget python3 python3-setuptools python3-pip unzip resource-agents-cloud
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip
            cd /tmp
            unzip /tmp/awscliv2.zip
            sudo /tmp/aws/install
            sudo ln -s /usr/local/bin/aws /usr/bin/aws
            rm -rf /tmp/aws
            sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -O /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo pip3 install /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo pip3 install boto3
          fi

          sudo /usr/local/bin/cfn-init -v --stack "${AWS::StackName}" --resource "RHELwithHAInstance" --configsets setup --region "${AWS::Region}"