---
AWSTemplateFormatVersion: 2010-09-09
Description: This template sets up RHEL with HA in the last node of the cluster. (qs-1s2qufol1)
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W4002
        - W9002 #Template is not customer-facing
        - W9003 #Template is not customer-facing
        - W9004 #Template is not customer-facing
        - W9006 #Template is not customer-facing
Parameters:
  SubnetId:
    Description: "Identifier of subnet the instance resides in"
    Type: AWS::EC2::Subnet::Id
  LaunchTemplateId:
    Description: "Identifier of the EC2 Launch Template used when creating the Instance"
    Type: String
  ClusterPassword:
    AllowedPattern: ^\S+$
    ConstraintDescription: Password should not be empty or contain whitespace
    Description: Password used for the user HACluster in the RHEL HA setup
    Type: String
    NoEcho: true
  ClusterRole:
    Description: IAM Role for access to the S3 Buckets
    Type: String
  FloatingIPAddress:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    ConstraintDescription: IP Address must be in the form x.x.x.x
    Description: Floating IP Address (MUST not be in any out the subnets)
    Default: 10.0.1.0
    Type: String
  RouteTableId:
    Description: ID of the route table that manages fencing
    Type: String
  NodeHostnames:
    Description: Whitespace separated list of the hostnames of all other nodes in the cluster
    Type: String
  ClusterHostMap:
    Description: Semicolon separated list of all other cluster nodes in the format <hostname>:<instance_id>
    Type: String
Resources:
  RHELwithHAInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ClusterRole
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 'install'
            - 'setup'
            - 'service'
            - 'cluster'
        install:
          packages: 
            yum: 
              pcs: []
              pacemaker: []
              fence-agents-aws: []
        setup:
          commands:
            setpassword:
              command: "echo \"hacluster:$CLUSTERPASSWORD\" | sudo chpasswd"
              env:
                CLUSTERPASSWORD: !Ref ClusterPassword
        service:
          services:
            systemd:
              pcsd:
                enabled: "true"
                ensureRunning: "true"
              nm-cloud-setup:
                enabled: "false"
                ensureRunning: "false"
              nm-cloud-setup.timer:
                enabled: "false"
                ensureRunning: "false"
        cluster:
          commands:
            execute:
              command: !Sub |
                TOKEN=`curl -s -X PUT http://169.254.169.254/latest/api/token -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
                EC2INSTANCEID=`curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id`
                EC2HOSTNAME=`curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/hostname`
                echo "Instance ID: $EC2INSTANCEID"
                echo "Instance Hostname: $EC2HOSTNAME"

                sudo pcs host auth ${NodeHostnames} $EC2HOSTNAME -u hacluster -p ${ClusterPassword}
                sudo pcs cluster setup newcluster ${NodeHostnames} $EC2HOSTNAME --force
                sudo pcs cluster start --all --wait
                sudo pcs stonith create clusterfence fence_aws region=${AWS::Region} pcmk_host_map="${ClusterHostMap};$EC2HOSTNAME:$EC2INSTANCEID" power_timeout=240 pcmk_reboot_timeout=480 pcmk_reboot_retries=4 --force
                sudo pcs resource create ha_listener ocf:heartbeat:aws-vpc-move-ip ip=${FloatingIPAddress} interface="eth0" routing_table=${RouteTableId} op monitor timeout="30s" interval="60s"
                sudo pcs property set stonith-enabled=true
                sudo pcs property set start-failure-is-fatal=true
                sudo pcs property set cluster-recheck-interval=75s
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateId
        Version: 1
      SourceDestCheck: false
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          rhel_ver=$(awk -F'=' '/VERSION_ID/{ gsub(/"/,""); print $2}' /etc/os-release)
          echo "RHEL Version: $rhel_ver"

          if [[ $rhel_ver == "8."* ]]; then
            sudo dnf -y install wget python3 python3-setuptools python3-docutils awscli
            sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -O /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo easy_install-3 --script-dir /usr/local/bin /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
          else
            sudo dnf -y install wget python3 python3-setuptools python3-pip unzip resource-agents-cloud
            curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip
            cd /tmp
            unzip /tmp/awscliv2.zip
            sudo /tmp/aws/install
            sudo ln -s /usr/local/bin/aws /usr/bin/aws
            rm -rf /tmp/aws
            sudo wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz -O /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
            sudo pip3 install /tmp/aws-cfn-bootstrap-py3-latest.tar.gz
          fi

          sudo dnf -y install https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm

          sudo aws configure set default.region "${AWS::Region}"
          sudo /usr/local/bin/cfn-init -v --stack "${AWS::StackName}" --resource "RHELwithHAInstance" --configsets setup --region "${AWS::Region}"